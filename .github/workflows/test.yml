# .github/workflows/test.yml

# Nombre del flujo de trabajo que aparecerá en la interfaz de GitHub Actions
name: Selenium Python Tests with Docker

# Define cuándo se ejecutará este flujo de trabajo
on:
  # Se ejecutará cuando haya un push a la rama 'main' (o la rama principal que uses)
  # También se puede configurar para 'pull_request' o 'workflow_dispatch' (para ejecutarlo manualmente)
  push:
    branches:
      - main
      - master # O la rama principal de tu repositorio

  # Permite ejecutar el flujo de trabajo manualmente desde la interfaz de GitHub
  workflow_dispatch:

jobs:
  # Define un trabajo (job) llamado 'run-tests'
  run-tests:
    # Sistema operativo en el que se ejecutará el trabajo (Ubuntu es común y tiene Docker preinstalado)
    runs-on: ubuntu-latest

    # Pasos que se ejecutarán en este trabajo
    steps:
      # Paso 1: Obtener el código del repositorio
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Paso 2: Configurar Docker Buildx (opcional, pero buena práctica para builds modernos de Docker)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Paso 3: Configurar QEMU (opcional, para emulación de plataformas si tu imagen Python no es amd64)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # PASO CLAVE AGREGADO: Asegurar que Docker y Docker Compose estén correctamente configurados
      - name: Set up Docker and Docker Compose
        uses: docker/setup-docker-action@v3

      # Paso 5 (antes Paso 4): Ejecutar Docker Compose para construir y levantar los servicios
      - name: Build and Run Docker Compose Services
        run: |
          echo "Starting Docker Compose services..."
          # Usamos 'docker compose' sin guion, que es la sintaxis moderna y más fiable
          # con el plugin de Docker Compose.
          docker compose up --build --abort-on-container-exit
          echo "Docker Compose services started and test completed."

      # Paso 6 (antes Paso 5): Recopilar los logs del contenedor de pruebas
      - name: Show Python Test Logs
        run: docker compose logs python-tests # También cambiamos a 'docker compose'

      # Paso 7 (antes Paso 6): Subir los artefactos generados (informe HTML y capturas de pantalla)
      - name: Upload Test Reports and Screenshots
        uses: actions/upload-artifact@v4
        with:
          path: |
            tests/test_busqueda_log_*.log
            tests/final_report_*.html
            tests/step_screenshot_*.png
            tests/error_screenshot_*.png
          name: selenium-test-results-${{ github.run_id }}
          retention-days: 7
